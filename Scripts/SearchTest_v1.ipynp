{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import pytesseract\n",
    "import webbrowser \n",
    "import unidecode\n",
    "import pyscreenshot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hacer: \n",
    "* Take a screenshot of the image and copy it's name file so that is can be used in the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def search():\n",
    "    #Variables \n",
    "    \n",
    "    tabUrl = \"http://google.com/?#q=\"\n",
    "    \n",
    "    #Taking the screenshot \n",
    "    \n",
    "    screenshot=pyscreenshot.grab(bbox=(0,520,600,1000)) #Limita la pantalla\n",
    "    screenshot.save('/Users/andres/Desktop/picture.png')\n",
    "    \n",
    "    #Getting the text from the image\n",
    "    \n",
    "    imagen = Image.open('/Users/andres/Desktop/picture.png')\n",
    "    text = pytesseract.image_to_string(imagen, lang = \"spa\")\n",
    "    sentence = text\n",
    "    sentence = unidecode.unidecode(sentence)\n",
    "    search_a = sentence.replace(' ','+')\n",
    "    print(sentence)\n",
    "    #Making an usable array \n",
    "\n",
    "    \n",
    "    search_a = (search_a.split(\"\\n\\n\"))\n",
    "    for i in range(0,4): \n",
    "        search_a[i] = search_a[i].replace(\"\\n\",\"\")\n",
    "\n",
    "    q = search_a[0] #This is the text of the question\n",
    "    a1 = search_a[1] #Text of the options\n",
    "    a2 = search_a[2] \n",
    "    a3 = search_a[3]\n",
    "    \n",
    "    #Searching \n",
    "    \n",
    "    print(\"option: \")\n",
    "    command = input()\n",
    "    \n",
    "    if(command == \"q\"): \n",
    "        webbrowser.open(tabUrl+q,new=2)\n",
    "    elif(command == \"a1\"): \n",
    "        webbrowser.open(tabUrl+a1,new=2)\n",
    "    elif(command == \"a2\"): \n",
    "        webbrowser.open(tabUrl+a2,new=2)\n",
    "    elif(command == \"a3\"): \n",
    "        webbrowser.open(tabUrl+a3,new=2)\n",
    "    elif(command == \"a\"): \n",
    "        webbrowser.open(tabUrl+a1,new=2)\n",
    "        webbrowser.open(tabUrl+a2,new=2)\n",
    "        webbrowser.open(tabUrl+a3,new=2)\n",
    "    elif(command == \"qa\"): \n",
    "        webbrowser.open(tabUrl+q+a1,new=2)\n",
    "        webbrowser.open(tabUrl+q+a2,new=2)\n",
    "        webbrowser.open(tabUrl+q+a3,new=2)\n",
    "    elif(command == \"qa1\"): \n",
    "        webbrowser.open(tabUrl+q+a1,new=2)\n",
    "    elif(command == \"qa2\"): \n",
    "        webbrowser.open(tabUrl+q+a2,new=2)\n",
    "    elif(command == \"qa3\"): \n",
    "        webbrowser.open(tabUrl+q+a3,new=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "?Que pelicula mexicana nominada al\n",
      "Oscar fue protagonizada por el actor\n",
      "asiatico Toshiro Mifune?\n",
      "\n",
      "Babel\n",
      "\n",
      "Alsino y el Condor\n",
      "\n",
      "Animas Trujano\n",
      "option: \n",
      "qa\n"
     ]
    }
   ],
   "source": [
    "search()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
